package com.esirong.timer;

import java.util.List;
import com.esirong.timer.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TASK.
 */
public class Task {

    private Long id;
    private String title;
    private String note;
    private String type;
    private Integer priority;
    private Long start_at;
    private Long end_at;
    private Long alert_at;
    private Integer status;
    private Boolean finished;
    private Boolean done;
    private Integer score;
    private String address;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskDao myDao;

    private List<Label> Label;

    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    public Task(Long id, String title, String note, String type, Integer priority, Long start_at, Long end_at, Long alert_at, Integer status, Boolean finished, Boolean done, Integer score, String address) {
        this.id = id;
        this.title = title;
        this.note = note;
        this.type = type;
        this.priority = priority;
        this.start_at = start_at;
        this.end_at = end_at;
        this.alert_at = alert_at;
        this.status = status;
        this.finished = finished;
        this.done = done;
        this.score = score;
        this.address = address;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getPriority() {
        return priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    public Long getStart_at() {
        return start_at;
    }

    public void setStart_at(Long start_at) {
        this.start_at = start_at;
    }

    public Long getEnd_at() {
        return end_at;
    }

    public void setEnd_at(Long end_at) {
        this.end_at = end_at;
    }

    public Long getAlert_at() {
        return alert_at;
    }

    public void setAlert_at(Long alert_at) {
        this.alert_at = alert_at;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Boolean getFinished() {
        return finished;
    }

    public void setFinished(Boolean finished) {
        this.finished = finished;
    }

    public Boolean getDone() {
        return done;
    }

    public void setDone(Boolean done) {
        this.done = done;
    }

    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Label> getLabel() {
        if (Label == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelDao targetDao = daoSession.getLabelDao();
            List<Label> LabelNew = targetDao._queryTask_Label(id);
            synchronized (this) {
                if(Label == null) {
                    Label = LabelNew;
                }
            }
        }
        return Label;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLabel() {
        Label = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
