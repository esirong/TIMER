package com.esirong.timer;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.esirong.timer.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK.
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Note = new Property(2, String.class, "note", false, "NOTE");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Priority = new Property(4, Integer.class, "priority", false, "PRIORITY");
        public final static Property Start_at = new Property(5, Long.class, "start_at", false, "START_AT");
        public final static Property End_at = new Property(6, Long.class, "end_at", false, "END_AT");
        public final static Property Alert_at = new Property(7, Long.class, "alert_at", false, "ALERT_AT");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
        public final static Property Finished = new Property(9, Boolean.class, "finished", false, "FINISHED");
        public final static Property Done = new Property(10, Boolean.class, "done", false, "DONE");
        public final static Property Score = new Property(11, Integer.class, "score", false, "SCORE");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
    };

    private DaoSession daoSession;


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'NOTE' TEXT," + // 2: note
                "'TYPE' TEXT," + // 3: type
                "'PRIORITY' INTEGER," + // 4: priority
                "'START_AT' INTEGER," + // 5: start_at
                "'END_AT' INTEGER," + // 6: end_at
                "'ALERT_AT' INTEGER," + // 7: alert_at
                "'STATUS' INTEGER," + // 8: status
                "'FINISHED' INTEGER," + // 9: finished
                "'DONE' INTEGER," + // 10: done
                "'SCORE' INTEGER," + // 11: score
                "'ADDRESS' TEXT);"); // 12: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(3, note);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(5, priority);
        }
 
        Long start_at = entity.getStart_at();
        if (start_at != null) {
            stmt.bindLong(6, start_at);
        }
 
        Long end_at = entity.getEnd_at();
        if (end_at != null) {
            stmt.bindLong(7, end_at);
        }
 
        Long alert_at = entity.getAlert_at();
        if (alert_at != null) {
            stmt.bindLong(8, alert_at);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        Boolean finished = entity.getFinished();
        if (finished != null) {
            stmt.bindLong(10, finished ? 1l: 0l);
        }
 
        Boolean done = entity.getDone();
        if (done != null) {
            stmt.bindLong(11, done ? 1l: 0l);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(12, score);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
    }

    @Override
    protected void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // note
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // priority
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // start_at
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // end_at
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // alert_at
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // finished
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // done
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // score
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // address
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNote(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPriority(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStart_at(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEnd_at(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAlert_at(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFinished(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setDone(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setScore(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
